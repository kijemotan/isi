ca65 V2.19 - Git 05cd805cb
Main file   : isi.asm
Current file: isi.asm

000000r 1               ; shoutouts to the folks
000000r 1                ; of the x16 discord, who
000000r 1                 ; helped me understand how
000000r 1                  ; this whole thing works.
000000r 1                   ; especially squall_ff8, the
000000r 1                    ; writer of some of this code
000000r 1                     ; (you can probably find it in
000000r 1                      ; #asm-dev lol)     - ss[motan]
000000r 1               
000000r 1               .org $080d
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1               ; VRAM MAP
00080D  1               ; $00000-$04000 -> charset
00080D  1               ; $04001-$0FFFF -> text
00080D  1               
00080D  1               ; KERNAL calls
00080D  1               CHROUT  = $FFD2
00080D  1               LOAD    = $FFD5
00080D  1               SETLFS  = $FFBA
00080D  1               SETNAM  = $FFBD
00080D  1               
00080D  1               ; VERA registers
00080D  1               V_CTRL      = $9F25
00080D  1               V_DC_VIDEO  = $9F29
00080D  1               V_L0_CONFIG = $9F2D
00080D  1               
00080D  1               ; VRAM addresses
00080D  1               CHARSET = $00000
00080D  1               CONTENT = $04001
00080D  1               
00080D  1               print_hex:
00080D  1  48             pha           ; push original a to stack
00080E  1  4A             lsr
00080F  1  4A             lsr
000810  1  4A             lsr
000811  1  4A             lsr           ; a = a >> 4
000812  1  20 1C 08       jsr print_hex_digit
000815  1  68             pla           ; pull original a back from stack
000816  1  29 0F          and #$0f      ; a = a & 0b00001111
000818  1  20 1C 08       jsr print_hex_digit
00081B  1  60             rts
00081C  1               print_hex_digit:
00081C  1  C9 0A          cmp #$0a
00081E  1  10 04          bpl @letter
000820  1  09 30          ora #$30      ; petscii numbers: 1=$31, 2=$32, etc.
000822  1  80 03          bra @print
000824  1               @letter:
000824  1  18             clc
000825  1  69 37          adc #$37      ; petscii letters: a=$41, b=$42, etc.
000827  1               @print:
000827  1  20 D2 FF       jsr CHROUT
00082A  1  60             rts
00082B  1               
00082B  1               start:
00082B  1               
00082B  1  9C 25 9F       stz V_CTRL
00082E  1  A9 51          lda #%01010001  ; VGA, layer 0, sprites
000830  1  8D 29 9F       sta V_DC_VIDEO
000833  1               
000833  1                 ; h=32(0), w=128(2), t256c(1), !bitmap(0), 1bpp(0)
000833  1  A9 28          lda #(0<<6 + 2<<4 + 1<<3 + 0<<2 + 0)
000835  1  8D 2D 9F       sta V_L0_CONFIG
000838  1               
000838  1  60             rts
000838  1               
