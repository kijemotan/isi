ca65 V2.19 - Git 05cd805cb
Main file   : isi.asm
Current file: isi.asm

000000r 1               ; shoutouts to the folks
000000r 1                ; of the x16 discord, who
000000r 1                 ; helped me understand how
000000r 1                  ; this whole thing works.
000000r 1                   ; especially squall_ff8, the
000000r 1                    ; writer of some of this code
000000r 1                     ; (you can probably find it in
000000r 1                      ; #asm-dev lol)     - ss[motan]
000000r 1               
000000r 1               .org $080d
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1               ; VRAM MAP
00080D  1               ; $00000-$04000 -> charset
00080D  1               ; $04001-$0FFFF -> text
00080D  1               
00080D  1               ; KERNAL calls
00080D  1               LOAD    = $FFD5
00080D  1               SETLFS  = $FFBA
00080D  1               SETNAM  = $FFBD
00080D  1               
00080D  1               ; VERA registers
00080D  1               V_ADDR0_L     = $9F20
00080D  1               V_ADDR0_M     = $9F21
00080D  1               V_ADDR0_H     = $9F22
00080D  1               V_DATA0       = $9F23
00080D  1               V_CTRL        = $9F25
00080D  1               V_DC_VIDEO    = $9F29
00080D  1               V_L0_CONFIG   = $9F2D
00080D  1               V_L0_MAPBASE  = $9F2E
00080D  1               V_L0_TILEBASE = $9F2F
00080D  1               
00080D  1               ; VRAM addresses
00080D  1               CHARSET = $00000
00080D  1               CONTENT = $04000
00080D  1               
00080D  1  46 4F 4E 54  FONT: .literal "FONT.BIN"
000811  1  2E 42 49 4E  
000815  1               
000815  1               start:
000815  1               
000815  1  9C 25 9F       stz V_CTRL
000818  1  A9 51          lda #%01010001  ; VGA, layer 0, sprites
00081A  1  8D 29 9F       sta V_DC_VIDEO
00081D  1               
00081D  1                 ; h=32(0), w=128(2), t256c(0), !bitmap(0), 1bpp(0)
00081D  1  A9 20          lda #(0<<6 + 2<<4 + 0<<3 + 0<<2 + 0)
00081F  1  8D 2D 9F       sta V_L0_CONFIG
000822  1               
000822  1  A9 20          lda #(CONTENT>>9)
000824  1  8D 2E 9F       sta V_L0_MAPBASE
000827  1               
000827  1                 ; tilebase address = $00000, h=16(1), w=8(0)
000827  1  A9 02          lda #%00000010
000829  1  8D 2F 9F       sta V_L0_TILEBASE
00082C  1               
00082C  1                 ; load charset
00082C  1  A9 08          lda #$08  ; filename length
00082E  1  A2 0D          ldx #<FONT
000830  1  A0 08          ldy #>FONT
000832  1  20 BD FF       jsr SETNAM
000835  1               
000835  1  A9 01          lda #$01  ; logical file number - 1
000837  1  A2 08          ldx #$08  ; device number - SD card
000839  1  A0 00          ldy #$00  ; secondary address - load
00083B  1  20 BA FF       jsr SETLFS
00083E  1               
00083E  1  A9 02          lda #$02  ; load location - VRAM from $00000
000840  1  A2 00          ldx #<CHARSET
000842  1  A0 00          ldy #>CHARSET
000844  1  20 D5 FF       jsr LOAD
000847  1               
000847  1  A9 10          lda #(1<<4 + ^CONTENT)  ; address increment - 1, highest bit of address
000849  1  8D 22 9F       sta V_ADDR0_H
00084C  1  A9 00          lda #<CONTENT           ; middle byte of address
00084E  1  8D 21 9F       sta V_ADDR0_M
000851  1  A9 40          lda #>CONTENT           ; low byte of address
000853  1  8D 20 9F       sta V_ADDR0_L
000856  1               
000856  1  A9 DE          lda #$DE
000858  1  8D 23 9F       sta V_DATA0
00085B  1  A9 01          lda #$01
00085D  1  8D 23 9F       sta V_DATA0
000860  1  A9 60          lda #$60
000862  1  8D 23 9F       sta V_DATA0
000865  1  A9 01          lda #$01
000867  1  8D 23 9F       sta V_DATA0
00086A  1               
00086A  1  60             rts
00086A  1               
